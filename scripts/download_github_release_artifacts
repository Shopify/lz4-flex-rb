#!/usr/bin/env ruby
# frozen_string_literal: true

require "net/http"
require "json"
require "fileutils"

def github_request(uri, token, headers: {}, limit: 10)
  raise "Too many HTTP redirects" if limit == 0

  uri = URI(uri)
  request = Net::HTTP::Get.new(uri)
  request["Authorization"] = "Bearer #{token}"
  headers.each { |key, value| request[key] = value }

  response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
    http.request(request)
  end

  case response
  when Net::HTTPSuccess
    response.body
  when Net::HTTPRedirection
    location = response["location"]
    warn("Redirected to #{location}")
    github_request(location, token, headers: headers, limit: limit - 1)
  else
    raise "Request failed with status #{response.code}"
  end
end

def fetch_github_token
  return ENV["GITHUB_TOKEN"] if ENV["GITHUB_TOKEN"]

  command = 'printf "host=github.com\nprotocol=https\npath=Shopify/lz4-flex-rb.git" | git credential fill'
  output = %x(#{command})
  token = output.match(/password=(.+)/)[1].strip
  raise "Failed to get GitHub token" if token.empty?

  token
end

if ARGV.length != 2
  puts "Usage: #{$PROGRAM_NAME} <repo> <tag>"
  exit 1
end

repo = ARGV[0]
tag = ARGV[1]
token = fetch_github_token

release_url = "https://api.github.com/repos/#{repo}/releases/tags/#{tag}"
release_response = github_request(release_url, token)
release_id = JSON.parse(release_response)["id"]

assets_url = "https://api.github.com/repos/#{repo}/releases/#{release_id}/assets"
assets_response = github_request(assets_url, token)
assets = JSON.parse(assets_response)

puts "Downloading assets:\n#{assets.map { |asset| "  - #{asset["name"]}" }.join("\n")}"
puts "Downloading artifacts from #{repo}##{tag} (release_id=#{release_id})"

assets.each do |asset|
  url = asset["url"]
  name = asset["name"]
  FileUtils.mkdir_p("pkg")
  puts "Saving artifact to pkg/#{name}..."
  File.open("pkg/#{name}", "wb") do |file|
    file.write(github_request(url, token, headers: { "Accept" => "application/octet-stream" }))
  end
end

puts "Done!"
